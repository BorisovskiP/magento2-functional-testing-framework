<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <cest name="PersistedReplacementCest">
        <before>
            <createData entity="ReplacementPerson" mergeKey="createData1"/>
        </before>
        <test name="PersistedReplacementTest">
            <createData entity="ReplacementPerson" mergeKey="testScopeData"/>
            <createData entity="UniquePerson" mergeKey="uniqueData"/>

            <!-- parameterized url that uses literal params -->
            <amOnPage url="{{SamplePage.url('success','success2')}}" mergeKey="a0"/>

            <!-- url referencing data that was created in this <test> -->
            <amOnPage url="$testScopeData.firstname$.html" mergeKey="a1"/>

            <!-- url referencing data that was created in a <before> -->
            <amOnPage url="$$createData1.firstname$$.html" mergeKey="a2"/>

            <!--parameterized url that uses created data params-->
            <amOnPage url="{{SamplePage.url($testScopeData.firstname$,$testScopeData.lastname$)}}" mergeKey="a3"/>
            <amOnPage url="{{SamplePage.url($$createData1.firstname$$,$$createData1.lastname$$)}}" mergeKey="a4"/>

            <!-- parameterized selector that uses literal params -->
            <click selector="{{SampleSection.oneParamElement($testScopeData.firstname$)}}" mergeKey="c1"/>
            <click selector="{{SampleSection.twoParamElement($testScopeData.firstname$,'success')}}" mergeKey="c2"/>

            <!-- parameterized selector with literal, static data, and created data  -->
            <click selector="{{SampleSection.threeParamElement('John', ReplacementPerson.lastname, $testScopeData.lastname$)}}"
                   mergeKey="c3"/>

            <!-- selector that uses created data -->
            <click selector="#$testScopeData.firstname$ .$testScopeData.lastname$" mergeKey="c4"/>
            <click selector="#$$createData1.firstname$$ .$$createData1.lastname$$" mergeKey="c5"/>

            <!-- userInput that uses created data -->
            <fillField selector="#sample" userInput="Hello $testScopeData.firstname$ $testScopeData.lastname$"
                       mergeKey="f1"/>
            <fillField selector="#sample" userInput="Hello $$createData1.firstname$$ $$createData1.lastname$$"
                       mergeKey="f2"/>

            <!-- parameterArray replacement-->
            <searchAndMultiSelectOption mergeKey="g1" selector="#selector" parameterArray="[$testScopeData.lastname$]"/>
            <searchAndMultiSelectOption mergeKey="g2" selector="#selector" parameterArray="[$$createData1.lastname$$]"/>

            <!-- uniqueData replacement -->
            <amOnPage url="$uniqueData.firstname$.html" mergeKey="h1"/>
            <amOnPage url="{{SamplePage.url($uniqueData.firstname$,$uniqueData.lastname$)}}" mergeKey="h2"/>
            <click selector="{{SampleSection.oneParamElement($uniqueData.firstname$)}}" mergeKey="h3"/>
            <click selector="{{SampleSection.twoParamElement($uniqueData.firstname$,'success')}}" mergeKey="h4"/>
            <click selector="#$uniqueData.firstname$" mergeKey="h5"/>

            <!-- selector1/2 replacement -->
            <dragAndDrop selector1="$uniqueData.firstname$" selector2="$uniqueData.firstname$" mergeKey="j1"/>
            <dragAndDrop selector1="{{SampleSection.oneParamElement($uniqueData.firstname$)}}" selector2="{{SampleSection.twoParamElement($uniqueData.firstname$,'success')}}" mergeKey="j2"/>
            
            <!-- expected, actual replacements -->
            <assertStringStartsNotWith mergeKey="assert1" expected="D" actual="$$createData1.lastname$$, $$createData1.firstname$$" message="fail"/>
            <assertStringStartsWith mergeKey="assert2" expected="W" actual="$uniqueData.firstname$ $uniqueData.lastname$" message="pass"/>
            <assertEquals mergeKey="assert5" expected="$$createData1.lastname$$" actual="$$createData1.lastname$$" message="pass"/>
            <assertFileExists mergeKey="assert6" actual="../Data/SampleData.xml" message="pass"/>

            <!-- expectedArray, actualArray replacements -->
            <assertArraySubset mergeKey="assert9" expectedArray="[$$createData1.lastname$$, $$createData1.firstname$$]" actualArray="[$$createData1.lastname$$, $$createData1.firstname$$, 1]" message="pass"/>
            <assertArraySubset mergeKey="assert10" expectedArray="[$uniqueData.firstname$, $uniqueData.lastname$]" actualArray="[$uniqueData.firstname$, $uniqueData.lastname$, 1]" message="pass"/>
            <assertArrayHasKey mergeKey="assert3" expected="lastname" actualArray="[['lastname' => $$createData1.lastname$$], ['firstname' => $$createData1.firstname$$]" message="pass"/>
            <assertArrayHasKey mergeKey="assert4" expected="lastname" actualArray="[['lastname' => $uniqueData.lastname$], ['firstname' => $uniqueData.firstname$]" message="pass"/>

            <!-- message replacements -->
            <fail mergeKey="assert7" message="$uniqueData.firstname$ $uniqueData.lastname$"/>
            <fail mergeKey="assert8" message="$$createData1.firstname$$ $$createData1.lastname$$"/>
        </test>
    </cest>
</config>
